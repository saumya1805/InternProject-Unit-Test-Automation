import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import com.force.commons.sobject.accesscheck.ActivitiesAccessCheck;
import com.force.commons.sobject.entities.StandardEntitiesT;
import com.google.common.collect.Maps;
import core.connect.api.ConnectInJavaException;
import ui.activities.api.util.TaskDao;
import ui.activities.api.util.TaskHelper;
import ui.aura.components.Components;
import ui.plugins.api.navigation.NavigationCommand;
import ui.plugins.api.navigation.NavigationContext;
import ui.plugins.api.navigation.NavigationEvent;
import ui.plugins.api.navigation.NavigationEventProvider;
import ui.services.ListViewService;
import ui.services.api.escalation.EscalationPermSet;
import ui.services.api.escalation.EscalationPermSet.State;
import ui.services.connection.models.api.Record;
import ui.services.exceptions.SObjectException;
import ui.services.exceptions.ServiceException;
import ui.services.layout.ListLayoutUiAdapter;
import ui.services.models.RecordActionsPair;
import ui.services.utils.PermAndPrefUtil;
import ui.services.utils.RecordInfo;
import ui.services.utils.RecordUtils;

@Component
@Lazy
@EscalationPermSet(state = State.LOG)
public class TaskCreateNavigationCommand implements NavigationCommand {

      @Autowired
      private NavigationEventProvider navigationEventProvider;
      @Autowired
      private TaskDao taskDao;
      @Autowired
      private TaskHelper taskHelper;
      @Autowired
      private ListViewService listViewService;
      @Autowired
      private RecordUtils recordUtils;
      @Autowired
      private PermAndPrefUtil permAndPrefUtil;
      @Override
      public NavigationEvent execute(NavigationContext navigationContext) throws ServiceException {

          // getInContextOfRecordId() returns the record id of the task we just saved, so it's guaranteed not null.
          String createdTaskRecordId = navigationContext.getInContextOfRecordId();

          Record createdTaskRecord = null;
          try{
              // since we have to load record to see if it is a main recurring task, load it here first to potentially save a call later
              createdTaskRecord = taskDao.getTaskRecord(createdTaskRecordId);
          } catch (ServiceException e) {
              // This means the created task is assigned to another user and the current user doesn't have access to it.
              // That's fine; we'll show a generic 'task creation successful' message.
              if (!(e.getCause() instanceof SObjectException || e.getCause() instanceof ConnectInJavaException)) {
                  // We got some other exception besides the No Access exception.
                  // Just throw it.
                  throw e;
              }
          }

          // added a check here to see if createdTaskRecord is  null, in case if it is delegated
          boolean createdTaskInCurrentList = false;
          if (createdTaskRecord != null) {
              // if the task we created is a main recurring task, substitute createdTaskRecord with the first occurrence in the series
              if (taskHelper.isMainRecurringTask(createdTaskRecord)) {
                  createdTaskRecord = taskDao.getFirstOccurrence(createdTaskRecordId);
              }
          }

          RecordActionsPair taskRecordActionPair;
          if (isTaskListViewsDisabled()) {
              // if in main/detail UI, check if task should be added to filter and get task
              // added a check here to see if createdTaskRecord is  null because it may be a main recurring task that has no occurrences
              if (createdTaskRecord != null) {
                  String listName = navigationContext.getNavigationLocationId();
                  RecordInfo recordInfo = recordUtils.getRecordInfo(StandardEntitiesT.Task);
                  ListLayoutUiAdapter listView = taskHelper.getListview(recordInfo, listName);
                  createdTaskInCurrentList = listViewService.isIdMatchedForAListView(listView, recordInfo, listName, createdTaskRecord.getId());
              }
              if (!createdTaskInCurrentList)
                  // This task should not be added to current filter. Still show a generic task creation message
                  taskRecordActionPair = null;
              } else {
                  taskRecordActionPair = getTaskRecordActionPair(createdTaskRecord);
              }
          } else {
              // if in listViews UI, get task details and handle whether to show task details on right/navigate to sobject downstream
              // since we can't check whether we are in split mode or not from here
              taskRecordActionPair = getTaskRecordActionPair(createdTaskRecord);
          }

          String prependEventName = Components.RuntimeActivities.TASK_AFTER_CREATE_PREPEND.getFQN();
          Map<String, Object> taskPrependEventAttributes = Maps.newHashMapWithExpectedSize(1);
          taskPrependEventAttributes.put("createdTaskAndActions", taskRecordActionPair);
          taskPrependEventAttributes.put("recordId", taskRecordActionPair != null ? taskRecordActionPair.getRecord().getId() : null);
          return navigationEventProvider.provide(prependEventName, taskPrependEventAttributes);
      }


      private RecordActionsPair getTaskRecordActionPair(Record taskRecord) throws ServiceException {
          RecordActionsPair taskRecordActionPair = null;
          if (taskRecord != null) {
              try {
                  // Note: this does not reload the task record from recordGvpUtil.
                  // It just loads the actions associated with createdTaskRecord
                  // and returns a RecordActionsPair of createdTaskRecord and the actions.
                  taskRecordActionPair = taskDao.getTaskAndActions(taskRecord);
              } catch (ServiceException e) {
                  // This means the created task is assigned to another user and the current user doesn't have access to it.
                  // That's fine; we'll show a generic 'task creation successful' message.
                  if (!(e.getCause() instanceof SObjectException)) {
                      // We got some other exception besides the No Access exception.
                      // Just throw it.
                      throw e;
                  }
                  taskRecordActionPair = null;
              }
          } else {
              taskRecordActionPair = null;
          }
          return taskRecordActionPair;
      }

      private boolean isTaskListViewsDisabled() {
          return permAndPrefUtil.isEnabled(ActivitiesAccessCheck.ORG_HIDES_TASK_LIST_VIEWS);
      }


      protected void setRecordUtils(RecordUtils recordUtils) {
          this.recordUtils = recordUtils;
      }
  }